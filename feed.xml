<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Anthony Trama</title>
    <description>I want to make the web experience better.
</description>
    <link>http://www.anthonytrama.com//</link>
    <atom:link href="http://www.anthonytrama.com//feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 22 Feb 2018 04:20:26 +0000</pubDate>
    <lastBuildDate>Thu, 22 Feb 2018 04:20:26 +0000</lastBuildDate>
    <generator>Jekyll v3.6.2</generator>
    
      <item>
        <title>The Divine Comedy of Asynchronous JavaScript</title>
        <description>&lt;p&gt;When I was in &lt;a href=&quot;https://www.ucsb.edu&quot;&gt;college&lt;/a&gt;, I took an entire class dedicated to the &lt;cite&gt;Divine Comedy&lt;/cite&gt;. I don’t remember very much about it, other than I had little desire to read it and the professor had a thick Italian accent; both of which resulted in this being all that I remember about the book. That, and it had something to do with Dante traveling through hell, purgatory, and eventually, Heaven. So come with me, as we travel through the hell, purgatory, and Heaven of asynchronous JavaScript.&lt;/p&gt;

&lt;h2 id=&quot;what-do-i-mean-by-asynchronous-javascript&quot;&gt;What do I Mean by Asynchronous JavaScript?&lt;/h2&gt;
&lt;p&gt;Asynchronous programming allows different events to occur independently of the flow in the main program. On websites, this means that different events can occur that update state with user input, refresh a list while the user does something else on the page, or check properties of different objects, all without blocking each other.&lt;/p&gt;

&lt;h2 id=&quot;the-two-circles-of-callback-hell-inferno&quot;&gt;The Two Circles of Callback Hell (Inferno)&lt;/h2&gt;

&lt;figure&gt;
  &lt;picture&gt;
    &lt;source srcset=&quot;/img/articles/2018/02/infernoLg.webp&quot; media=&quot;(min-width: 1400px)&quot; type=&quot;image/webp&quot; /&gt;
    &lt;source srcset=&quot;/img/articles/2018/02/infernoLg.jpg&quot; media=&quot;(min-width: 1400px)&quot; /&gt;
    &lt;source srcset=&quot;/img/articles/2018/02/infernoSm.webp&quot; media=&quot;(min-width: 701px)&quot; type=&quot;image/webp&quot; /&gt;
    &lt;source srcset=&quot;/img/articles/2018/02/infernoSm.jpg&quot; media=&quot;(min-width: 701px)&quot; /&gt;
    &lt;source srcset=&quot;/img/articles/2018/02/inferno.webp&quot; type=&quot;image/webp&quot; /&gt;
    &lt;img src=&quot;/img/articles/2018/02/inferno.jpg&quot; alt=&quot;Hoarders and Wasters&quot; /&gt;
  &lt;/picture&gt;
  &lt;figcaption&gt;Gustave Doré's: The hoarders and wasters. &quot;For all the gold that is beneath the moon, / Or ever has been, of these weary souls / Could never make a single one reponse.&quot; &lt;a href=&quot;https://en.wikipedia.org/wiki/File:Gustave_Dor%C3%A9_-_Dante_Alighieri_-_Inferno_-_Plate_22_(Canto_VII_-_Hoarders_and_Waster.jpg&quot;&gt;Wikimedia&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Let me get this out there right off the bat: callbacks are not technically asynchronous. They are used to synchronously order functions that call asynchronous functions. Like do thing A, then make ajax request B, then do thing C, then do thing D. Also, I am not using actual callbacks in every example, but instead what I have seen developers do in the wild. There are three levels of Callback Hell, so let’s dive into the deepest level.&lt;/p&gt;

&lt;h3 id=&quot;the-third-circle&quot;&gt;The Third Circle&lt;/h3&gt;
&lt;p&gt;In this example, there are four functions. &lt;code class=&quot;highlighter-rouge&quot;&gt;compileAll()&lt;/code&gt; simply returns the result of &lt;code class=&quot;highlighter-rouge&quot;&gt;getThingOne&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;getThingTwo&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;getThingThree&lt;/code&gt;. Easy enough. Except &lt;code class=&quot;highlighter-rouge&quot;&gt;getThingTwo&lt;/code&gt; is asynchronous and must wait on &lt;code class=&quot;highlighter-rouge&quot;&gt;setTimeout&lt;/code&gt; before returning a value, similar to making a network request (&lt;code class=&quot;highlighter-rouge&quot;&gt;setTimeout&lt;/code&gt; is used in place of network requests for this entire article).&lt;/p&gt;

&lt;p&gt;This is not an example of a true callback, but it is a race condition that happens too often and you can remediate this with a promise. The issue here is that &lt;code class=&quot;highlighter-rouge&quot;&gt;compileAll&lt;/code&gt; doesn’t know to wait for &lt;code class=&quot;highlighter-rouge&quot;&gt;getThingTwo&lt;/code&gt;, so it just prints the result before &lt;code class=&quot;highlighter-rouge&quot;&gt;getThingTwo&lt;/code&gt; has finished because it has no way to know when &lt;code class=&quot;highlighter-rouge&quot;&gt;getThingTwo&lt;/code&gt; finishes. Hence, the result is &lt;code class=&quot;highlighter-rouge&quot;&gt;Chuck Noll, undefined, Mike Tomlin&lt;/code&gt;. Check out the example below.&lt;/p&gt;

&lt;p data-height=&quot;265&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;Xgjmgz&quot; data-default-tab=&quot;result&quot; data-user=&quot;atrama&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;Callback Hell 1&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/atrama/pen/Xgjmgz/&quot;&gt;Callback Hell 1&lt;/a&gt; by Anthony Trama (&lt;a href=&quot;https://codepen.io/atrama&quot;&gt;@atrama&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;This method works if all your code is synchronous. This would obviously not be a viable solution if you had asynchronous functions, because you can never guarantee that you are getting the correct result from each function.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The rest of the examples will have code snippets, but a link to a CodePen, so you can experiment and see the result of each one.&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;the-second-circle&quot;&gt;The Second Circle&lt;/h3&gt;
&lt;p&gt;The previous circle was pretty rough, but we’re still stuck in Callback Hell as you can tell by the example below and the fact that you can hear &lt;cite&gt;American Woman&lt;/cite&gt; by Lenny Kravitz playing in the background.&lt;/p&gt;

&lt;p&gt;In this example, we’re kicking everything off with &lt;code class=&quot;highlighter-rouge&quot;&gt;getThingOne()&lt;/code&gt;, which then has to have the logic inside of it to explicitly call &lt;code class=&quot;highlighter-rouge&quot;&gt;getThingTwo()&lt;/code&gt; and pass the result of &lt;code class=&quot;highlighter-rouge&quot;&gt;getThingOne()&lt;/code&gt; into it and so on down the line. This means that you can never separate these functions. Anytime you want to &lt;code class=&quot;highlighter-rouge&quot;&gt;getThingOne()&lt;/code&gt;, you have to accept the chain reaction of events and results that come with it.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/atrama/f512564ce2b73ba7c72f2c1d12f2e052.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;a href=&quot;https://codepen.io/atrama/pen/pwEjVP&quot;&gt;View the demo on CodePen&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There is no way to just &lt;code class=&quot;highlighter-rouge&quot;&gt;getThingOne()&lt;/code&gt; and simply return the result of &lt;code class=&quot;highlighter-rouge&quot;&gt;names[0]&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;Chuck Noll&lt;/code&gt;). Promises, on the other hand, allow you to do just that.&lt;/p&gt;

&lt;h3 id=&quot;the-first-circle&quot;&gt;The First Circle&lt;/h3&gt;

&lt;script src=&quot;https://gist.github.com/atrama/5169d5c2171f221d97d02ba0fee45670.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;a href=&quot;https://codepen.io/atrama/pen/vWqjrv&quot;&gt;View the demo on CodePen&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is really the only &lt;strong&gt;true&lt;/strong&gt; example of a callback here. It’s very similar to the previous example except for a couple things:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Callbacks are passed as named functions, so &lt;code class=&quot;highlighter-rouge&quot;&gt;getThingOne&lt;/code&gt; isn’t directly tied to &lt;code class=&quot;highlighter-rouge&quot;&gt;getThingTwo&lt;/code&gt; which isn’t directly tied to &lt;code class=&quot;highlighter-rouge&quot;&gt;getThingThree&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;You can optionally call the callback only if it’s passed &lt;code class=&quot;highlighter-rouge&quot;&gt;if(typeof callback === 'function){return callback()}, allowing you to call &lt;/code&gt;getThingOne&lt;code class=&quot;highlighter-rouge&quot;&gt; without needing to call &lt;/code&gt;getThingTwo`.&lt;/li&gt;
  &lt;li&gt;Callbacks are not named inside of each respective function, so you could do something like &lt;code class=&quot;highlighter-rouge&quot;&gt;getThingTwo([1,2,3], getThingOne)&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Callbacks are not necessarily bad patterns in and of themselves, but they are not the right tool for the job when you are dealing with asynchronous functions that can be called concurrently.&lt;/p&gt;

&lt;h2 id=&quot;the-4-terraces-of-promise-purgatory-purgatorio&quot;&gt;The 4 Terraces of Promise Purgatory (Purgatorio)&lt;/h2&gt;

&lt;figure&gt;
  &lt;picture&gt;
    &lt;source srcset=&quot;/img/articles/2018/02/purgatorioLg.webp&quot; media=&quot;(min-width: 1400px)&quot; type=&quot;image/webp&quot; /&gt;
    &lt;source srcset=&quot;/img/articles/2018/02/purgatorioLg.jpg&quot; media=&quot;(min-width: 1400px)&quot; /&gt;
    &lt;source srcset=&quot;/img/articles/2018/02/purgatorioMd.webp&quot; media=&quot;(min-width: 1101px)&quot; type=&quot;image/webp&quot; /&gt;
    &lt;source srcset=&quot;/img/articles/2018/02/purgatorioMd.jpg&quot; media=&quot;(min-width: 1101px)&quot; /&gt;
    &lt;source srcset=&quot;/img/articles/2018/02/purgatorioSm.webp&quot; media=&quot;(min-width: 701px)&quot; type=&quot;image/webp&quot; /&gt;
    &lt;source srcset=&quot;/img/articles/2018/02/purgatorioSm.jpg&quot; media=&quot;(min-width: 701px)&quot; /&gt;
    &lt;source srcset=&quot;/img/articles/2018/02/purgatorio.webp&quot; type=&quot;image/webp&quot; /&gt;
    &lt;img src=&quot;/img/articles/2018/02/purgatorio.jpg&quot; alt=&quot;Eustache Le Sueur&quot; /&gt;
  &lt;/picture&gt;
  &lt;figcaption&gt;Dante begins the Purgatorio by invoking the Muses&quot; &lt;a href=&quot;https://commons.wikimedia.org/wiki/File:Eustache_Le_Sueur_002.jpg&quot;&gt;Wikimedia&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id=&quot;what-the-hell-is-a-promise&quot;&gt;What the Hell is a Promise?&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promises&lt;/a&gt; are simply functions that represent an eventual return value (whether successful or not) of an asynchronous operation. Imagine you’re shoe shopping and you need a different size, so you ask a salesman, Al. When Al tells you, “let me go check for that size in the back and I’ll come back and let you know,” he is promising one of two things. He will either return with that shoe or, if it’s not available, return and inform you that he couldn’t find it. He might give you more information (“we’ll get a new shipment Monday,” “we don’t carry that shoe anymore”), but it’s up to Al to decide what information he returns with.&lt;/p&gt;

&lt;p&gt;Meanwhile, while Al is doing his thing in the back, you are free to wait where you are, or continue looking around, check out socks, or do whatever you’d like. You don’t have to stand still and wait for Al, he’ll let you know the result of his inventory check before you move to the next step and head over to the cash register.&lt;/p&gt;

&lt;p&gt;In order for a promise to complete, it needs to either &lt;code class=&quot;highlighter-rouge&quot;&gt;resolve&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;reject&lt;/code&gt;, which executes the promise (see examples below). In the case of Al, once the inventory check &lt;code class=&quot;highlighter-rouge&quot;&gt;resolves&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;rejects&lt;/code&gt;, he immediately turns around and returns to the front of the store where you met. Let’s dive into some examples, to make more sense of promises.&lt;/p&gt;

&lt;h3 id=&quot;the-fourth-terrace-a-single-promise-to-handle-them-all&quot;&gt;The Fourth Terrace: A Single Promise to Handle Them All&lt;/h3&gt;
&lt;p&gt;In reality, this really is probably one of the cleaner examples here, but it doesn’t quite show the power of promises. Line 11 executes &lt;code class=&quot;highlighter-rouge&quot;&gt;getAllNames&lt;/code&gt;, which creates a &lt;code class=&quot;highlighter-rouge&quot;&gt;new Promise&lt;/code&gt; that fetches a list of names. Think of &lt;code class=&quot;highlighter-rouge&quot;&gt;resolve(names)&lt;/code&gt; as &lt;code class=&quot;highlighter-rouge&quot;&gt;return(names)&lt;/code&gt; in a non-promise function.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/atrama/33a2ffb9c6396da9d542aef79f7024a4.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;a href=&quot;https://codepen.io/atrama/pen/vZXLBE&quot;&gt;View the demo on CodePen&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The magic starts to happen in &lt;code class=&quot;highlighter-rouge&quot;&gt;then()&lt;/code&gt; method, which has an parameter, &lt;code class=&quot;highlighter-rouge&quot;&gt;response&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;response&lt;/code&gt; is whatever was resolved in the promise on line 5. In this case, an array of names.&lt;/p&gt;

&lt;h3 id=&quot;the-third-terrace-chaining&quot;&gt;The Third Terrace: Chaining&lt;/h3&gt;
&lt;p&gt;What if we need to wait on three separate asynchronous functions to finish before doing something? That’s where chaining come in handy. In the example below, &lt;code class=&quot;highlighter-rouge&quot;&gt;getThingTwo&lt;/code&gt;, which is another promise, is called after &lt;code class=&quot;highlighter-rouge&quot;&gt;getThingOne&lt;/code&gt; finishes successfully (I’ll cover &lt;code class=&quot;highlighter-rouge&quot;&gt;reject&lt;/code&gt; in a bit). Notice that &lt;code class=&quot;highlighter-rouge&quot;&gt;getThingTwo&lt;/code&gt; is dependent on the response of &lt;code class=&quot;highlighter-rouge&quot;&gt;getThingOne&lt;/code&gt;, which is passed into &lt;code class=&quot;highlighter-rouge&quot;&gt;getThingTwo&lt;/code&gt; as the &lt;code class=&quot;highlighter-rouge&quot;&gt;arg&lt;/code&gt; parameter. This same pattern is followed in &lt;code class=&quot;highlighter-rouge&quot;&gt;getThingThree&lt;/code&gt;, which is dependent on the response of &lt;code class=&quot;highlighter-rouge&quot;&gt;getThingTwo&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;getThingThree&lt;/code&gt; then passes its response to the last &lt;code class=&quot;highlighter-rouge&quot;&gt;then()&lt;/code&gt; on line 32, which spits out the result in the DOM.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/atrama/f39c6445b6f695b4c111b078d1e5e46c.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;a href=&quot;https://codepen.io/atrama/pen/NgRGBR&quot;&gt;View the demo on CodePen&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This method of chaining is especially useful when your promises rely on each other. They will each wait on the previous promise(s) to resolve before starting. If you need multiple promises, but they can be called independently of each other (they don’t need another promise’s response), you can bundle them together. That’s what happens in the Second Terrace of Promise Purgatory…&lt;/p&gt;

&lt;h3 id=&quot;the-second-terrace-bundling-promises&quot;&gt;The Second Terrace: Bundling Promises&lt;/h3&gt;
&lt;p&gt;This is an extremely clean way to tell your code to go do a bunch of asynchronous tasks, and then wait until they all complete before handling their response. It’s like sending a bunch of shoe salesmen into the back to get different models of shoes that you want to buy because, hey, it’s payday today, while you wait by the register until they all return with the different pairs of shoes you tasked them with retrieving. One might come back after 30 seconds, another after 2 minutes, and the last one after 5 minutes. They can give you their shoe immediately after they return, but you’re going to wait until all the salesmen return before proceeding to the cash register.&lt;/p&gt;

&lt;p&gt;In the example below, &lt;code class=&quot;highlighter-rouge&quot;&gt;getThingOne&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;getThingTwo&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;getThingThree&lt;/code&gt; are the salesmen and the &lt;code class=&quot;highlighter-rouge&quot;&gt;.then()&lt;/code&gt; on line 4 is you walking up to the cash register.
&lt;script src=&quot;https://gist.github.com/atrama/f7d693b00b091f3154353ebc944ab80e.js&quot;&gt;&lt;/script&gt;
&lt;a href=&quot;https://codepen.io/atrama/pen/YQGwzz&quot;&gt;View the demo on CodePen&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But you are a picky customer. You will only give this store your business if they have all your shoes. So, what if one of them has trouble retrieving your shoe? Then you enter the First Terrace…&lt;/p&gt;

&lt;h3 id=&quot;the-first-terrace-catching-rejections-and-errors&quot;&gt;The First Terrace: Catching Rejections and Errors&lt;/h3&gt;
&lt;p&gt;When a promise is unsuccessful, it can &lt;code class=&quot;highlighter-rouge&quot;&gt;reject()&lt;/code&gt;. This can happen because of a bad request, or maybe it watches a status code in an ajax request and &lt;code class=&quot;highlighter-rouge&quot;&gt;reject()&lt;/code&gt;s if it’s not in the &lt;code class=&quot;highlighter-rouge&quot;&gt;200&lt;/code&gt; range. If any promise in the group &lt;code class=&quot;highlighter-rouge&quot;&gt;reject()&lt;/code&gt;s, the &lt;code class=&quot;highlighter-rouge&quot;&gt;catch()&lt;/code&gt; on line 13 will fire immediately and proceed with your error handling.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;getThingFour&lt;/code&gt; is the fourth salesman who is just appearing in this story. You sent him to find a pair of shoes, but he couldn’t find your size, so he returns with bad news. So this is like you walking out of the store upset. This is really helpful in allowing you to give feedback to users and developers so your code doesn’t just fail silently because of a failed promise.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/atrama/c9a8d091d9f43497e8d9d2bbf87a4889.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;a href=&quot;https://codepen.io/atrama/pen/OgWbbj&quot;&gt;View the demo on CodePen&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-4-spheres-of-asyncawait-paradise-paradiso&quot;&gt;The 4 Spheres of Async/Await Paradise (Paradiso)&lt;/h2&gt;

&lt;figure&gt;
  &lt;picture&gt;
    &lt;source srcset=&quot;/img/articles/2018/02/paradisoMd.webp&quot; media=&quot;(min-width: 1101px)&quot; type=&quot;image/webp&quot; /&gt;
    &lt;source srcset=&quot;/img/articles/2018/02/paradisoMd.jpg&quot; media=&quot;(min-width: 1101px)&quot; /&gt;
    &lt;source srcset=&quot;/img/articles/2018/02/paradisoSm.webp&quot; media=&quot;(min-width: 701px)&quot; type=&quot;image/webp&quot; /&gt;
    &lt;source srcset=&quot;/img/articles/2018/02/paradisoSm.jpg&quot; media=&quot;(min-width: 701px)&quot; /&gt;
    &lt;source srcset=&quot;/img/articles/2018/02/paradiso.webp&quot; type=&quot;image/webp&quot; /&gt;
    &lt;img src=&quot;/img/articles/2018/02/paradiso.jpg&quot; alt=&quot;Saint Francis of Assisi by Jusepe de Ribera&quot; /&gt;
  &lt;/picture&gt;
  &lt;figcaption&gt;Saint Francis of Assisi&lt;a href=&quot;https://en.wikipedia.org/wiki/File:Saint_Francis_of_Assisi_by_Jusepe_de_Ribera.jpg&quot;&gt;Wikimedia&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Things get even better when you get into Async/Await Paradise. Async/Await is really a pattern that is comprised of:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;An &lt;code class=&quot;highlighter-rouge&quot;&gt;async&lt;/code&gt; function, which looks like a regular function, but has &lt;code class=&quot;highlighter-rouge&quot;&gt;async&lt;/code&gt; before the function declaration. Async functions return a promise and simplify the promise pattern.&lt;/li&gt;
  &lt;li&gt;An &lt;code class=&quot;highlighter-rouge&quot;&gt;await&lt;/code&gt; expression, which pauses execution until the promise expression is resolved.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This should make sense with the following examples, so let’s move on to paradise…&lt;/p&gt;

&lt;h3 id=&quot;the-fourth-sphere-another-promise-to-handle-them-all&quot;&gt;The Fourth Sphere: Another promise to handle them all&lt;/h3&gt;
&lt;p&gt;Admittedly, this example doesn’t really prove that advantageous over the first promise example, but it gets better, I promise. Everything is the same until line 13, where the async function is declared and called. &lt;code class=&quot;highlighter-rouge&quot;&gt;names&lt;/code&gt; represents the returned value of the &lt;code class=&quot;highlighter-rouge&quot;&gt;getAllNames&lt;/code&gt; promise and puts that value in &lt;code class=&quot;highlighter-rouge&quot;&gt;result.innerText&lt;/code&gt;.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/atrama/30dd79a14de3eeb01a64b7c28b177b8c.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;a href=&quot;https://codepen.io/atrama/pen/eRdoqo&quot;&gt;View the demo on CodePen&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At this point, it’s just a different syntax with an extra two lines of JavaScript, but there are already advantages of writing code this way, as opposed to Promise Purgatory 1.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The syntax is easier to read. This is, admittedly, personal preference. However, either due to it being true, or due to the nature of JavaScript developers always falling in love with the new thing, most developers who have used both seem to prefer the &lt;code class=&quot;highlighter-rouge&quot;&gt;await&lt;/code&gt; syntax over &lt;code class=&quot;highlighter-rouge&quot;&gt;.then()&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;It future proofs your code, should there be additional promises needed later. Using &lt;code class=&quot;highlighter-rouge&quot;&gt;await&lt;/code&gt;, the next developer simply needs to add another line of code. If you use &lt;code class=&quot;highlighter-rouge&quot;&gt;.then()&lt;/code&gt;, they will need to either chain &lt;code class=&quot;highlighter-rouge&quot;&gt;.then()&lt;/code&gt; or rewrite the &lt;code class=&quot;highlighter-rouge&quot;&gt;.then()&lt;/code&gt; into await (more about this in the next example).&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;the-third-sphere-cleaning-up-then-then-then&quot;&gt;The Third Sphere: Cleaning up then() then() then()&lt;/h3&gt;
&lt;p&gt;If you show this to somebody who has no (or little) experience with promises, I’ll bet they will understand it better than the second promise example. Lines 1 through 27 are virtually the same as the previous promise example. However, the async &lt;code class=&quot;highlighter-rouge&quot;&gt;getNames&lt;/code&gt; function creates 3 variables for &lt;code class=&quot;highlighter-rouge&quot;&gt;name1&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;name2&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;name3&lt;/code&gt; and awaits each of those before placing the results of each of those promises in &lt;code class=&quot;highlighter-rouge&quot;&gt;result.innerText&lt;/code&gt;. This is much cleaner to read than chained &lt;code class=&quot;highlighter-rouge&quot;&gt;then().then().then()&lt;/code&gt; and easier to write.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/atrama/a3540334e479daccba307f8b4305c8f4.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;a href=&quot;https://codepen.io/atrama/pen/awmrBv&quot;&gt;View the demo on CodePen&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The downside of having three awaits is the same as chaining 3 promises: &lt;strong&gt;they perform synchronously&lt;/strong&gt;. Meaning, &lt;code class=&quot;highlighter-rouge&quot;&gt;getThingTwo&lt;/code&gt; will not start until &lt;code class=&quot;highlighter-rouge&quot;&gt;getThingOne&lt;/code&gt; has finished (note: this is no different than chaining &lt;code class=&quot;highlighter-rouge&quot;&gt;.then()&lt;/code&gt;). There are times when that is necessary, but in this case, we can, and want to, get all three names asynchronously.&lt;/p&gt;

&lt;h3 id=&quot;the-second-sphere-awaiting-bundled-promises&quot;&gt;The Second Sphere: Awaiting Bundled Promises&lt;/h3&gt;
&lt;p&gt;Now things really start to get clean in our list of promises. Once again, on line 33 &lt;code class=&quot;highlighter-rouge&quot;&gt;result.innerText&lt;/code&gt; simply returns &lt;code class=&quot;highlighter-rouge&quot;&gt;names&lt;/code&gt;; however, this time &lt;code class=&quot;highlighter-rouge&quot;&gt;names&lt;/code&gt; represents a &lt;code class=&quot;highlighter-rouge&quot;&gt;Promise.all&lt;/code&gt; object, which requests all three promises at once (asynchronously), and waits for them all to resolve (or any to reject) before moving to the next line. Line 31 simply lists out the array of promises as invoked functions.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/atrama/f29bb0b37e546aba71a140787b138774.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;a href=&quot;https://codepen.io/atrama/pen/dzpVgL&quot;&gt;View the demo on CodePen&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;the-first-sphere-seeing-the-error-of-our-ways&quot;&gt;The First Sphere: Seeing the Error of Our Ways&lt;/h3&gt;
&lt;p&gt;On line 38 in the gist below, &lt;code class=&quot;highlighter-rouge&quot;&gt;promiseList&lt;/code&gt; defines an additional promise (&lt;code class=&quot;highlighter-rouge&quot;&gt;getThingFour()&lt;/code&gt;), which will reject, like it did in the First Terrace of Purgatorio. This time though, I’m relying on a &lt;code class=&quot;highlighter-rouge&quot;&gt;try...catch&lt;/code&gt; statement to catch rejected promises. It really works similar to the pattern of:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;myPromise()
.then(response =&amp;gt; {
  ...//if successful
}).catch(error =&amp;gt; {
  ...//error handled here
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Except, with &lt;code class=&quot;highlighter-rouge&quot;&gt;await&lt;/code&gt;, you use&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;try{
  let response = await myPromise() //if successful
}catch(error){
  //error handled here
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This might not look that much better, and you’re right in this case. But, with multiple chained promises, it gets even more messy…&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;myPromise()
.then(response =&amp;gt; {
  doNextPromise();
}).then(response2 =&amp;gt; {
  doAnotherPromise();
}).then(response3 =&amp;gt; {
  //do something if all promises are successful
}).catch(error =&amp;gt; {
  //error handled here
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;…but with &lt;code class=&quot;highlighter-rouge&quot;&gt;await&lt;/code&gt;, your code stays clean&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;try{
  const myPromise = await myPromise();
  const doNextPromise = await doNextPromise();
  const doAnotherPromise = await doAnotherPromise();
  //do something if all promises are successful
}catch(error){
  //error handled here
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Make sense? They both boil down to block 1 handling successful attempts and block 2 handling errors. In the example below, much like previous examples, line 40 &lt;code class=&quot;highlighter-rouge&quot;&gt;await&lt;/code&gt;s &lt;code class=&quot;highlighter-rouge&quot;&gt;Promise.all(promiseList)&lt;/code&gt; and does something with the response. But this time, lines 43-44 handle any errors (&lt;code class=&quot;highlighter-rouge&quot;&gt;reject()&lt;/code&gt; thrown from any promise). &lt;code class=&quot;highlighter-rouge&quot;&gt;error&lt;/code&gt; (line 42) is simply whatever the rejected promise returns in the &lt;code class=&quot;highlighter-rouge&quot;&gt;reject()&lt;/code&gt; method. For example: &lt;code class=&quot;highlighter-rouge&quot;&gt;reject('No arguments supplied')&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;reject('Invalid user')&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;reject(jsonResponse.errorMessage)&lt;/code&gt;, etc.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/atrama/a3382720b683c866db1214c337e7cae8.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;a href=&quot;https://codepen.io/atrama/pen/jwMoVX&quot;&gt;View the demo on CodePen&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping Up&lt;/h2&gt;
&lt;p&gt;That’s it! You’ve made it all the way through! Hopefully this helps you understand how to better work with asynchronous JavaScript and clean up any old patterns. See something that can be improved here, &lt;a href=&quot;/#contact&quot;&gt;let me know&lt;/a&gt;!&lt;/p&gt;
</description>
        <pubDate>Thu, 08 Feb 2018 00:00:00 +0000</pubDate>
        <link>http://www.anthonytrama.com//2018/02/08/devine-comedy-of-asynchronous-javascript</link>
        <guid isPermaLink="true">http://www.anthonytrama.com//2018/02/08/devine-comedy-of-asynchronous-javascript</guid>
        
        
        <category>JavaScript</category>
        
      </item>
    
      <item>
        <title>The new site</title>
        <description>&lt;p&gt;The new site is finally done! It’s actually been done for a few months now, but my 11 week old son has sort of thrown a wrench into side projects. If you’re not familiar with Jekyll, it’s a static site generator. Meaning, instead of having a bunch of layouts and config files that run server-side when the user visits your page (which takes time), you compile everything in your dev environment, then ship it to production. So yes, you have a bunch of HTML files, but you only manage a handful of layouts and Jekyll does the job of compiling all those HTML files before you deploy. And all the server has to do, is spit out plain HTML. No server-side processing required. There were a number of reasons I moved from WordPress to Jekyll, namely:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;There’s no database and, thus, nothing to hack.&lt;/li&gt;
  &lt;li&gt;It’s incredibly easy to get started with.&lt;/li&gt;
  &lt;li&gt;In order to really do WordPress right, you need to dedicate yourself to WordPress development. I’d rather focus on JavaScript myself.&lt;/li&gt;
  &lt;li&gt;Honestly, saying you use WordPress just sounds dirty now. Unless you happen to be a WordPress developer.&lt;/li&gt;
  &lt;li&gt;It’s &lt;em&gt;super&lt;/em&gt; fast (more about that below).&lt;/li&gt;
&lt;/ul&gt;

&lt;picture&gt;
  &lt;source srcset=&quot;/img/2016_11_site_old.webp&quot; type=&quot;image/webp&quot; /&gt;
  &lt;img src=&quot;/img/2016_11_site_old.png&quot; alt=&quot;Old Site Network Requests&quot; /&gt;
&lt;/picture&gt;
&lt;p&gt;Looking at my old WordPress site (homepage), you can see that it had a payload of 513KB and took 2.42 seconds to load. Not terrible, but there was certainly room for improvement. It also made 24 requests; partially because the site was about 5 years old and didn’t bundle assets the way it could have.&lt;/p&gt;

&lt;picture&gt;
  &lt;source srcset=&quot;/img/2016_11_site_new.webp&quot; type=&quot;image/webp&quot; /&gt;
  &lt;img src=&quot;/img/2016_11_site_new.png&quot; alt=&quot;New Site Network Requests&quot; /&gt;
&lt;/picture&gt;
&lt;p&gt;The new site’s payload is about 20% the size of the old site and loads in less than half a second. There are half the amount of requests and the content (not including images) is actually ready after less than a quarter of a second! Unlike WordPress, Jekyll does not have a database to look up, so your blog content is there &lt;em&gt;muuuccchh&lt;/em&gt; faster.&lt;/p&gt;

&lt;p&gt;So what else enabled the site to pick up speed? Admittedly, changing the framework took care of a lot, but there are a lot of easy steps anyone can take. And speaking as somebody who looks at a lot of portfolio sites, most developers are not doing these items:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Bundle assets. I could have gone farther by loading critical CSS in the HTML (and probably will).&lt;/li&gt;
  &lt;li&gt;Change images to use &lt;code class=&quot;highlighter-rouge&quot;&gt;webp&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;svg&lt;/code&gt; and combine these formats with the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;picture&amp;gt;&lt;/code&gt; element and &lt;code class=&quot;highlighter-rouge&quot;&gt;srcset&lt;/code&gt; attributes.&lt;/li&gt;
  &lt;li&gt;Don’t let today’s trends trap you tomorrow. I’m really excited by the fact that my articles are just plain markdown, which means they’re compiled to plain HTML. No nested &lt;code class=&quot;highlighter-rouge&quot;&gt;div&lt;/code&gt;s to make a parallax or carousel animation in an article. Just content.&lt;/li&gt;
  &lt;li&gt;Think about which assets you really needs. Really, this is a blog and portfolio site.&lt;/li&gt;
  &lt;li&gt;Add cool features that are actually useful. My next feature? Using the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Notifications_API/Using_the_Notifications_API&quot;&gt;Notifications API &lt;/a&gt; to display notifications when a new post is added.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are still a lot of changes I want to make. Adding a link to recent work is a big one. So is writing more. But for now, I’m also enjoying coming home and playing with my son, as well as working on the house. So progress might be slow. And I’m totally fine with that.&lt;/p&gt;
</description>
        <pubDate>Tue, 15 Nov 2016 00:00:00 +0000</pubDate>
        <link>http://www.anthonytrama.com//2016/11/15/the-new-site/</link>
        <guid isPermaLink="true">http://www.anthonytrama.com//2016/11/15/the-new-site/</guid>
        
        
        <category>Jekyll</category>
        
        <category>Personal</category>
        
      </item>
    
      <item>
        <title>On to Jekyll!</title>
        <description>&lt;p&gt;Today I’m switching my site over to &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;. I’ve done a couple small Jekyll projects, but never a full blog and portfolio. And it will have updated projects, since this site hasn’t been updated in years. Plus, I’m hoping to incorporate some posts about my house’s remodel to show where my time has gone the last 2 years. Updates to come…&lt;/p&gt;
</description>
        <pubDate>Mon, 16 May 2016 02:58:36 +0000</pubDate>
        <link>http://www.anthonytrama.com//2016/05/16/onward-to-jekyll/</link>
        <guid isPermaLink="true">http://www.anthonytrama.com//2016/05/16/onward-to-jekyll/</guid>
        
        
        <category>Jekyll</category>
        
        <category>Personal</category>
        
      </item>
    
      <item>
        <title>So you&amp;#8217;re starting work as a web developer?</title>
        <description>&lt;p&gt;When I started one of my jobs, I had to attend an orientation that featured a panel of rising stars at the company who were there to give advice on how to succeed at the company. Every panelist offered “work hard” as their advice to success. If they needed to tell me to work hard to succeed at my new job, they had already failed at their hiring choice. “Work hard” is the upfront advice equivalent to “try harder” after somebody makes an honest mistake.&lt;/p&gt;

&lt;p&gt;My first job out of college started a little different. I was given a piece of advice day one and I still remember it to this day. One of the directors called me into their office. Now, keep in mind that two months before this day, I was living in a fraternity house with 12 other guys. Now I was working in an office not much larger, but with almost all women, many of whom were old enough to be my mom. I was raised to respect your elders and say yes. My new colleague, was quick to point out “listen, I and many of the other people here are old enough to be your parents and it’s good to have respect, but don’t ever feel like you can’t say no. You have a job to do and you need to be fair and responsible to that role.” It was hard to do, but there’s no question that it made me a better employee. “Work hard,” “be nice,” and “show up early” are all great pieces of advice, but I’m a fan of more off-beat advice. It has helped me in my career, so here’s my advice to people starting out in web development; which can really be used in any field.&lt;/p&gt;

&lt;h2 id=&quot;somebody-brought-donuts-grab-one-then-bring-them-in-next-time&quot;&gt;Somebody brought donuts, grab one. Then bring them in next time&lt;/h2&gt;

&lt;p&gt;Seriously, go for it. But don’t take 2 until later in the day when everyone has had a chance to get some. You might be a starving, not so far removed from being a college student employee or intern, and your colleagues probably know that, but show them that first and foremost you’re a professional. Next week, bring in donuts, make brownies, buy some bags of chips, do something to show you’re a part of the team. Especially if you’re an intern. Do you know how often interns bring things in? Not very often. Do you know how much they stand out when they do it? A lot. You’re likely auditioning for a job, why not do something small to stand out?&lt;/p&gt;

&lt;h2 id=&quot;volunteer-to-be-challenged&quot;&gt;Volunteer to be challenged&lt;/h2&gt;

&lt;p&gt;On a scale of 1-10, you’re a 4 as a developer. Volunteer the next time a project is 5 in terms of difficulty. Don’t volunteer for the 9, that’s just stupid. Baby steps.&lt;/p&gt;

&lt;p&gt;Also, freelance on the side or create a side project. You are hopefully learning a lot on the job, but learn something (a framework, tool, etc.) outside of your team’s stack and you just might be able to be the person who already has a head start if the team has an opportunity for it.&lt;/p&gt;

&lt;h2 id=&quot;pretend-you-care-about-the-boring-adults&quot;&gt;Pretend you care about the boring adults&lt;/h2&gt;

&lt;p&gt;You know how I know my tales of home improvement and 90’s era TV references are boring? Because not long ago, I listed to people a decade or two older than me talk about their life and thought some of it sounded boring. But you’ll make a connection with them and learn some life lessons outside of work. You might just wind up being friends!&lt;/p&gt;

&lt;h2 id=&quot;youre-failing-tell-your-boss&quot;&gt;You’re failing. Tell your boss&lt;/h2&gt;

&lt;p&gt;You know what sucks more than telling your boss you might have bit off more than you can chew before a deadline? Telling your boss after a deadline.&lt;/p&gt;

&lt;p&gt;A good boss will challenge you; and a good employee will challenge themselves. But a good boss will never leave you out to fail. They might ask you if you can write a new project using a framework or concepts you’re not familiar. Don’t say no, accept the challenge and be honest up front. But if you’re not hitting the marks you both expected at a certain point into the project, ask for help. Maybe there’s a senior developer who can mentor you. A good boss will respect your hard work and honesty, because in the end, you’re going to become a better person to work with after learning those new concepts, rather than committing bad code or work-arounds.&lt;/p&gt;
</description>
        <pubDate>Mon, 16 May 2016 02:52:55 +0000</pubDate>
        <link>http://www.anthonytrama.com//2016/05/16/so-youre-starting-work-as-a-web-developer/</link>
        <guid isPermaLink="true">http://www.anthonytrama.com//2016/05/16/so-youre-starting-work-as-a-web-developer/</guid>
        
        
        <category>Industry</category>
        
      </item>
    
      <item>
        <title>Removing node_modules in a Jekyll build</title>
        <description>&lt;p&gt;My &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; build recently slowed down dramatically. Like minutes to build versus a few seconds before. Since Jekyll relies on ruby to watch for changes, then compile all your files into a new _site folder, this made working virtually impossible.&lt;/p&gt;

&lt;p&gt;The fix was simple and obvious (after some confused searching, of course). I recently added gulp to my project’s workflow, which added a ton of node_modules folders. Just open the &lt;a href=&quot;http://jekyllrb.com/docs/configuration/&quot;&gt;_config.yml&lt;/a&gt; file in your site root, exclude those files, and any other folders or files you don’t need to deploy and builds are back to a few seconds!&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;exclude: [node_modules, gulpfile.js]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you don’t have a _config.yml file, you can add one.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.anthonytrama.com/wp-content/uploads/2015/06/Screen-Shot-2015-06-28-at-3.16.29-PM.png&quot;&gt;&lt;img class=&quot;alignnone size-full wp-image-627&quot; alt=&quot;Jekyll config exclude settings code&quot; src=&quot;http://www.anthonytrama.com/wp-content/uploads/2015/06/Screen-Shot-2015-06-28-at-3.16.29-PM.png&quot; width=&quot;551&quot; height=&quot;121&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 28 Jun 2015 22:30:31 +0000</pubDate>
        <link>http://www.anthonytrama.com//2015/06/28/removing-node_modules-in-a-jekyll-build/</link>
        <guid isPermaLink="true">http://www.anthonytrama.com//2015/06/28/removing-node_modules-in-a-jekyll-build/</guid>
        
        
        <category>Gulp</category>
        
        <category>JavaScript</category>
        
        <category>Jekyll</category>
        
      </item>
    
      <item>
        <title>3 Easy Features that Enhance the User Experience</title>
        <description>&lt;script type=&quot;text/javascript&quot; src=&quot;https://assets.codepen.io/assets/embed/ei.js&quot; async=&quot;&quot;&gt;&lt;/script&gt;

&lt;p&gt;Too many websites focus on looks and trends and miss the mark of good user experience. Fancy animations, hero images, and carousels will all go way of flash, splash pages, and 10px font one day. Making the site easy to use, fast, and intuitive has never gone out of style.&lt;/p&gt;

&lt;p&gt;No doubt, great design enhances the experience and makes the site easier to use, but there are too many features that are here today and ready to be use that are virtually ignored by the sites that could truly benefit from them the most. And the sad part is, it really doesn’t take a lot of effort to start using them.&lt;/p&gt;

&lt;h2 id=&quot;web-storage&quot;&gt;Web Storage&lt;/h2&gt;

&lt;p&gt;I use a lot of sites that are necessary, require frequent visits, and I frankly do not want to spend time on them. I visit my credit card and bank website all the time; it’s not because I have fun on those sites. Every time I sign in, I have to go through the same steps to get to the same information. Want to sort this month’s transactions by amount spent? No problem, just find the dropdowns and change them…every…single…time…you…visit.&lt;/p&gt;

&lt;p&gt;…Or give the user the choice, but remember their last or most frequent choices. But you’re not a back-end developer? Perfect, web storage (sessionStorage, localStorage, indexedDB) are great at doing this!&lt;/p&gt;

&lt;p class=&quot;codepen&quot; data-height=&quot;268&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;azqqPd&quot; data-default-tab=&quot;result&quot; data-user=&quot;atrama&quot;&gt;
  See the Pen &lt;a href=&quot;https://codepen.io/atrama/pen/azqqPd/&quot;&gt;localStorage Dropdown menu demo&lt;/a&gt; by Anthony Trama (&lt;a href=&quot;https://codepen.io/atrama&quot;&gt;@atrama&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;See how simple that is? It can be as small as a few lines of code. Don’t you wish your bank remembered this for you and you could see everything at a glance without navigating or changing dropdowns every time?&lt;/p&gt;

&lt;p&gt;Support: &lt;a href=&quot;http://caniuse.com/#search=web%20storage&quot;&gt;Almost every &lt;del&gt;mobile&lt;/del&gt; browser and even IE8&lt;/a&gt; (not a typo!).&lt;/p&gt;

&lt;h2 id=&quot;geolocation&quot;&gt;Geolocation&lt;/h2&gt;

&lt;p&gt;I recently booked a trip to Las Vegas to, ahem, only watch March Madness for fun and never walk into the sportsbook. Living in San Diego, I (predictably) wanted to set San Diego as my departure city. Depending on the airline’s website I used, I either had to type the name or select from a drop down list of &lt;em&gt;all&lt;/em&gt; of their cities. Yes, every city they fly out of. A few lines of JavaScript can detect a user’s location. From there, it really isn’t very hard to find the nearest departure city and make the experience 1,304% better. Yes, I did the math.&lt;/p&gt;

&lt;p&gt;Don’t forget to allow access when you’re browser prompts you. &lt;ins&gt;Some browsers now require https to enable geolocation. Open this pen in codepen and change to https to see the feature or view the demos on &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Geolocation/Using_geolocation&quot;&gt;MDN&lt;/a&gt;&lt;/ins&gt;&lt;/p&gt;

&lt;p class=&quot;codepen&quot; data-height=&quot;268&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;gbdLwE&quot; data-default-tab=&quot;result&quot; data-user=&quot;atrama&quot;&gt;
  See the Pen &lt;a href=&quot;https://codepen.io/atrama/pen/gbdLwE/&quot;&gt;gbdLwE&lt;/a&gt; by Anthony Trama (&lt;a href=&quot;https://codepen.io/atrama&quot;&gt;@atrama&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;True, it’s not the fastest feature, but there are options to make it faster, more/less precise, and you can check the location before the user focuses on the input to make it feel faster. Also, I know geolocation is used on the web today, but it really isn’t used in nearly as many places as it should be.&lt;/p&gt;

&lt;p&gt;Support: &lt;a href=&quot;http://caniuse.com/#feat=geolocation&quot;&gt;Almost every &lt;del&gt;mobile&lt;/del&gt; browser and even IE9&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;using-the-right-input-type&quot;&gt;Using the right input type&lt;/h2&gt;

&lt;p&gt;As a developer, guy always looking for ways to optimize time, and somebody with fat fingers who still struggles with a touch keyboard, this is one pattern that drives me crazy. It’s so easy to set the pattern or type attribute on an input tag to email, tel (phone), date, etc., which triggers the appropriate keyboard. And if your website’s doctype isn’t HTML5 (seriously though, it’s 2015), it doesn’t matter. The browser will pick it up if it supports the input type. If not, it will just render as text.&lt;/p&gt;

&lt;p&gt;How many custom datepickers have you enjoyed using on your phone? For me, it’s none. The date input type uses the OS datepicker (i.e.: the spinners in iOS). Email and tel give you the right keyboard so you don’t have to switch between letters, symbols, and numbers). There  are a lot more out there, but changing just a couple would probably really improve most forms out there today.&lt;/p&gt;

&lt;div id=&quot;attachment_598&quot; style=&quot;width: 179px&quot; class=&quot;wp-caption alignnone&quot;&gt;
  &lt;a href=&quot;http://www.anthonytrama.com/wp-content/uploads/2015/03/IMG_3969.png&quot;&gt;&lt;img class=&quot;size-medium wp-image-598&quot; alt=&quot;screenshot of iOS 8 with a text input.&quot; src=&quot;http://www.anthonytrama.com/wp-content/uploads/2015/03/IMG_3969-169x300.png&quot; width=&quot;169&quot; height=&quot;300&quot; srcset=&quot;http://www.anthonytrama.com/wp-content/uploads/2015/03/IMG_3969-169x300.png 169w, http://www.anthonytrama.com/wp-content/uploads/2015/03/IMG_3969.png 640w&quot; sizes=&quot;(max-width: 169px) 100vw, 169px&quot; /&gt;&lt;/a&gt;

  &lt;p class=&quot;wp-caption-text&quot;&gt;
    iOS 8 with a text input.
  &lt;/p&gt;
&lt;/div&gt;

&lt;div id=&quot;attachment_597&quot; style=&quot;width: 179px&quot; class=&quot;wp-caption alignnone&quot;&gt;
  &lt;a href=&quot;http://www.anthonytrama.com/wp-content/uploads/2015/03/IMG_3970.png&quot;&gt;&lt;img class=&quot;size-medium wp-image-597&quot; alt=&quot;screenshot of iOS 8 with an email input.&quot; src=&quot;http://www.anthonytrama.com/wp-content/uploads/2015/03/IMG_3970-169x300.png&quot; width=&quot;169&quot; height=&quot;300&quot; srcset=&quot;http://www.anthonytrama.com/wp-content/uploads/2015/03/IMG_3970-169x300.png 169w, http://www.anthonytrama.com/wp-content/uploads/2015/03/IMG_3970.png 640w&quot; sizes=&quot;(max-width: 169px) 100vw, 169px&quot; /&gt;&lt;/a&gt;

  &lt;p class=&quot;wp-caption-text&quot;&gt;
    iOS 8 with an email input. Note, the @ symbol and &amp;#8220;.&amp;#8221; &amp;#8211; it gets even better with number and tel inputs types
  &lt;/p&gt;
&lt;/div&gt;

&lt;p data-height=&quot;268&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;YPJxbr&quot; data-default-tab=&quot;result&quot; data-user=&quot;atrama&quot; class=&quot;codepen&quot;&gt;
  See the Pen &lt;a href=&quot;https://codepen.io/atrama/pen/YPJxbr/&quot;&gt;YPJxbr&lt;/a&gt; by Anthony Trama (&lt;a href=&quot;https://codepen.io/atrama&quot;&gt;@atrama&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;Support: Depends on the input type, but &lt;a href=&quot;http://caniuse.com/#feat=forms&quot;&gt;almost all modern mobile browsers and desktop browsers updated in the last 3 years&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping Up&lt;/h2&gt;

&lt;p&gt;No, every website does not need all of these. Yes, it would look stupid to ask for the user’s location on your little blog (uh-oh). But think of the common sites you use where you need to enter a location, use different input types, or would just find it useful to have your preference remembered. Chances are, a lot of them don’t use these features.&lt;/p&gt;

&lt;p&gt;And that, is where we’re all being robbed of a great experience. Apps have used these features for a long time, it’s time for HTML and JavaScript developers to catch up if they ever want to be seen on par with native apps.&lt;/p&gt;
</description>
        <pubDate>Thu, 12 Mar 2015 04:33:39 +0000</pubDate>
        <link>http://www.anthonytrama.com//2015/03/12/3-easy-features-that-enhance-the-user-experience/</link>
        <guid isPermaLink="true">http://www.anthonytrama.com//2015/03/12/3-easy-features-that-enhance-the-user-experience/</guid>
        
        
        <category>Development</category>
        
        <category>Mobile</category>
        
      </item>
    
      <item>
        <title>What Is Killing Flat Design?</title>
        <description>&lt;p&gt;Let me start by saying, I like the flat design trend. And yes, I do believe that it is a trend. Overall, I really liked iOS7 when it came out; and I still like it. There are some apps that I believe have a worse user experience now, such as calendar and contacts (why does the never-used notes section take up so much space above “send message” and “share contact”), but overall I like the design.&lt;/p&gt;

&lt;div id=&quot;attachment_562&quot; style=&quot;width: 179px&quot; class=&quot;wp-caption alignnone&quot;&gt;
  &lt;a href=&quot;http://www.anthonytrama.com/wp-content/uploads/2014/03/photo-1.png&quot;&gt;&lt;img src=&quot;http://www.anthonytrama.com/wp-content/uploads/2014/03/photo-1-169x300.png&quot; alt=&quot;ios7 Contacts App - Beef Palace Butcher Shop info&quot; width=&quot;169&quot; height=&quot;300&quot; class=&quot;size-medium wp-image-562&quot; srcset=&quot;http://www.anthonytrama.com/wp-content/uploads/2014/03/photo-1-169x300.png 169w, http://www.anthonytrama.com/wp-content/uploads/2014/03/photo-1.png 640w&quot; sizes=&quot;(max-width: 169px) 100vw, 169px&quot; /&gt;&lt;/a&gt;

  &lt;p class=&quot;wp-caption-text&quot;&gt;
    Clean? Yes. But the notes section, aside from rarely being used, takes up a lot of space, forcing the user to scroll every time they want to send a message or share a contact
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;With that being said, the first dagger in the heart of flat design will be the blind faith in and overuse we well as misuse of flat design. Skeuomorphism isn’t inherently bad; seeing glossy icons in sand and adding an outer glow to everything is. Gradients, textures, and drop shadows still have their place in digital design.&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;en&quot;&gt;
  &lt;p&gt;
    I’m just curious. It seems an aesthetic upheld by one fruit-based company is now deemed correct, across everything? Regardless of anything.
  &lt;/p&gt;

  &lt;p&gt;
    &amp;mdash; Sarah Parmenter (@sazzy) &lt;a href=&quot;https://twitter.com/sazzy/statuses/385409561328619520&quot;&gt;October 2, 2013&lt;/a&gt;
  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;Flat design may just kill itself. I like flat design and I’m glad it’s here. Just as blind allegiance to Apple’s skeumorphic design created an overcrowded gradient and gloss party on the web, which made flat design a breath of fresh air, a “plain” web will one day give rise to some new, correct style of design.&lt;/p&gt;

&lt;p&gt;Let me repeat, I like flat design. But I also liked it when Google was using flat design before iOS7 came out.  Apple didn’t invent flat design, just like they weren’t the first major player with the cloud.&lt;/p&gt;

&lt;p&gt;It’s a shame that such a smart industry changed their mind on good design en masse because of blind faith. That being said, they’re creating some pretty damn good looking flat websites.&lt;/p&gt;
</description>
        <pubDate>Mon, 03 Mar 2014 04:42:40 +0000</pubDate>
        <link>http://www.anthonytrama.com//2014/03/03/what-is-killing-flat-design-2/</link>
        <guid isPermaLink="true">http://www.anthonytrama.com//2014/03/03/what-is-killing-flat-design-2/</guid>
        
        
        <category>Design</category>
        
        <category>Industry</category>
        
      </item>
    
      <item>
        <title>Yahoo&amp;#8217;s Cheap and Sneaky Recruiting Tactic (it&amp;#8217;s a good thing)</title>
        <description>&lt;p&gt;While trying to figure out how to win my &lt;a title=&quot;Yahoo Fantasy Football&quot; href=&quot;http://football.fantasysports.yahoo.com&quot; target=&quot;_blank&quot;&gt;fantasy football&lt;/a&gt; matchup with my ragtag group of second stringers, I noticed the page I was on seemed to have some sort of bug. So, like any sports fan, my first instinct was to open Chrome’s Dev Tools and see if I could spot the JavaScript error. Yeah, there were a few, but what I really noticed was Yahoo’s free, easy, effortless recruiting tactic. The following message appeared right at the top of their console log&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Like poking around in code? Like fantasy sports? Yahoo! Fantasy Sports is currently hiring both front and back end engineers. If you’d like to get paid to do what you love, drop us a resume at sportsjobs@yahoo-inc.com, and let us know where you found the e-mail address!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div id=&quot;attachment_516&quot; style=&quot;width: 1361px&quot; class=&quot;wp-caption alignnone&quot;&gt;
  &lt;a href=&quot;http://www.anthonytrama.com/wp-content/uploads/2013/11/Screen-Shot-2013-11-20-at-9.17.57-PM.png&quot;&gt;&lt;img class=&quot;size-full wp-image-516&quot; alt=&quot;Screenshot of Yahoo Fantasy Football&quot; src=&quot;http://www.anthonytrama.com/wp-content/uploads/2013/11/Screen-Shot-2013-11-20-at-9.17.57-PM.png&quot; width=&quot;1351&quot; height=&quot;321&quot; srcset=&quot;http://www.anthonytrama.com/wp-content/uploads/2013/11/Screen-Shot-2013-11-20-at-9.17.57-PM-300x71.png 300w, http://www.anthonytrama.com/wp-content/uploads/2013/11/Screen-Shot-2013-11-20-at-9.17.57-PM-1024x243.png 1024w, http://www.anthonytrama.com/wp-content/uploads/2013/11/Screen-Shot-2013-11-20-at-9.17.57-PM.png 1351w&quot; sizes=&quot;(max-width: 1351px) 100vw, 1351px&quot; /&gt;&lt;/a&gt;
  
  &lt;p class=&quot;wp-caption-text&quot;&gt;
    The lineup may be ugly, but the console log is just brilliant
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Seems like an easy, no-brainer way to find niche developers (remember, Yahoo asks you to mention where you found the email address). I don’t think other industries such as banking, communication, healthcare, etc. would benefit in the same way Yahoo may from this, but if you’re looking for developers who use your product, why not give this, or something similar (i.e., adding a similar comment in your source), a try?&lt;/p&gt;
</description>
        <pubDate>Sun, 24 Nov 2013 23:15:16 +0000</pubDate>
        <link>http://www.anthonytrama.com//2013/11/24/yahoo-fantasy-sports/</link>
        <guid isPermaLink="true">http://www.anthonytrama.com//2013/11/24/yahoo-fantasy-sports/</guid>
        
        
        <category>Industry</category>
        
      </item>
    
      <item>
        <title>&amp;#8230;And Boom Goes the Dynamite</title>
        <description>&lt;p&gt;When I decided to finally update my site and blog, after close to 5 years without a redesign and 2 years without a new post, I initially thought about blowing up the whole thing and starting over. Most people change, for better or worse, over time. Their ascent or descent is gradual. Pedro Martinez didn’t go from a 1.74 ERA and joking about the Yankees being his Daddy to sporting a Phillies uniform while making the NL East his daddy overnight.&lt;/p&gt;

&lt;div id=&quot;attachment_381&quot; style=&quot;width: 660px&quot; class=&quot;wp-caption alignnone&quot;&gt;
  &lt;a href=&quot;http://anthonytrama.com/wp-content/uploads/2013/05/pedro.jpg&quot;&gt;&lt;img class=&quot;size-full wp-image-381&quot; title=&quot;Pedro Martinez pitching for the Philadelphia Phillies&quot; alt=&quot;Pedro Martinez pitching for the Philadelphia Phillies&quot; src=&quot;http://anthonytrama.com/wp-content/uploads/2013/05/pedro.jpg&quot; width=&quot;650&quot; height=&quot;600&quot; /&gt;&lt;/a&gt;

  &lt;p class=&quot;wp-caption-text&quot;&gt;
    &amp;#8220;Good thing he didn&amp;#8217;t mention the Don Zimmer fight.&amp;#8221; Wikimedia photo taken by Flickr member dbking: &lt;a href=&quot;http://en.wikipedia.org/wiki/File:Pedro_Mart%C3%ADnez_on_September_8,_2009.jpg&quot;&gt;http://en.wikipedia.org/wiki/File:Pedro_Mart%C3%ADnez_on_September_8,_2009.jpg&lt;/a&gt;
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Continuing with the world’s worst metaphor, when a blog goes 2 years without an update, comparing posts is (hopefully) like comparing apples to old, rotten apples. Not that I’m trying to claim I’m a Pedro Martinez caliber web developer. I have better taste in &lt;a title=&quot;Pedro Martinez&quot; href=&quot;http://en.wikipedia.org/wiki/File:PedroMartinezSmall.jpg&quot; target=&quot;_blank&quot;&gt;hair&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Since my previous post, I have&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Learned a few new skills and drastically improved my knowledge of a few languages&lt;/li&gt;
  &lt;li&gt;Started a new job&lt;/li&gt;
  &lt;li&gt;Received a promotion&lt;/li&gt;
  &lt;li&gt;Tied the knot&lt;/li&gt;
  &lt;li&gt;Improved my health&lt;/li&gt;
  &lt;li&gt;Most importantly, won my first fantasy baseball championship&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Nevertheless, I’ve decided to keep the old blog posts. After all, there aren’t very many and I would hate to disappoint all the active commenters. Take for instance the guy who knows where I can get a great deal on R0lex watches, the non-bot with perfect English who has SEO secrets that he’s unlocked, or my future bride who is currently living in Russia and just waiting for me to bring her over the “United State of America.” I think it’s good to look at failures and embarrassments. They keep you moving forward; and at the very least, it will motivate me to write more so I can bury those old posts.&lt;/p&gt;

&lt;p&gt;So here’s to writing better, more insightful content more often. Or at least bouncing back a little.&lt;/p&gt;
</description>
        <pubDate>Mon, 27 May 2013 22:26:41 +0000</pubDate>
        <link>http://www.anthonytrama.com//2013/05/27/and-boom-goes-the-dynamite/</link>
        <guid isPermaLink="true">http://www.anthonytrama.com//2013/05/27/and-boom-goes-the-dynamite/</guid>
        
        <category>Baseball</category>
        
        <category>Sports</category>
        
        
        <category>Personal</category>
        
      </item>
    
      <item>
        <title>The Web as a House</title>
        <description>&lt;p&gt;JavaScript, jQuery, HTML, CSS, PHP, JSON. People who don’t work with the web every day, and sadly some who do, usually have a hard time understanding the difference between all the web jargon they come across. I’ve found it very useful to use the house analogy in the past. It’s not perfect, but it certainly helps others understand what goes into a website. So the next time your boss or client asks why you can’t just build your whole website with JavaScript, hold your laughter (for a few minutes) and give them the house analogy.&lt;/p&gt;

&lt;h2 id=&quot;html-the-bones&quot;&gt;HTML: The Bones&lt;/h2&gt;

&lt;p&gt;The “bones” of a house determine how it is laid out and where everything goes. They will also tell you how strong the structure and foundation are. Is it a 1,000 square foot home or a 4,000 square foot home? How many rooms will it have? Where does each area of the house go? You don’t want the laundry room upstairs near the baby’s room, do you? Should the kitchen be at the front or back of the house?&lt;/p&gt;

&lt;p&gt;The structure of a website is very similar. The process of building a small 1 page site is different from a 10 page site, which is different from a 100 page site. Which is partially why a client shouldn’t expect an answer to the most common question we hear: “how much does a website cost?” And if you’re the client and hear a flat answer without any consultation or other questions, run fast.&lt;/p&gt;

&lt;p&gt;A standard page is made up of individual elements (e.g., &amp;lt;article&amp;gt;, &amp;lt;h1&amp;gt; [heading], &amp;lt;p&amp;gt; [paragraph], &lt;img /&gt; [image]). When you craft these together, you end up with the structure of a page.&lt;/p&gt;

&lt;div id=&quot;attachment_528&quot; style=&quot;width: 1776px&quot; class=&quot;wp-caption alignnone&quot;&gt;
  &lt;a href=&quot;http://www.anthonytrama.com/wp-content/uploads/2012/03/Screen-Shot-2013-11-21-at-8.25.24-PM.png&quot;&gt;&lt;img class=&quot;size-full wp-image-528&quot; alt=&quot;The content of this post (left) and the code, with the structural elements in red (right)&quot; src=&quot;http://www.anthonytrama.com/wp-content/uploads/2012/03/Screen-Shot-2013-11-21-at-8.25.24-PM.png&quot; width=&quot;1766&quot; height=&quot;436&quot; srcset=&quot;http://www.anthonytrama.com/wp-content/uploads/2012/03/Screen-Shot-2013-11-21-at-8.25.24-PM-300x74.png 300w, http://www.anthonytrama.com/wp-content/uploads/2012/03/Screen-Shot-2013-11-21-at-8.25.24-PM-1024x252.png 1024w, http://www.anthonytrama.com/wp-content/uploads/2012/03/Screen-Shot-2013-11-21-at-8.25.24-PM.png 1766w&quot; sizes=&quot;(max-width: 1766px) 100vw, 1766px&quot; /&gt;&lt;/a&gt;
  
  &lt;p class=&quot;wp-caption-text&quot;&gt;
    The content of this post (left) and the code, with the structural elements in red (right)
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Before any code or color hits a site, most designers usually create wireframes, which are like blueprints for a website. They are plain, single-color, and often hand drawn sketches of the site. Just like architects take flow into account when designing a house, when laying out wireframes, designers need to think of how your users will not just use the site, but the overall narrative from landing on the site to checkout.&lt;/p&gt;

&lt;p&gt;By the way, have you ever walked into an open house and had somebody make you look at advertisements from Netflix or Ancestry.com before you get through the entry? That would be stupid right? Think about that next time you consider throwing pop-up advertisements on a site.&lt;/p&gt;

&lt;p&gt;You can live in a house with nothing but drywall, studs, and a roof, but it won’t be pleasant. Similarly, with HTML alone, your site can function, but it will lack some serious curb appeal.&lt;/p&gt;

&lt;h2 id=&quot;css-the-curb-appeal&quot;&gt;CSS: The Curb Appeal&lt;/h2&gt;

&lt;p&gt;CSS (Cascading Style Sheets) are what gives websites their design. It’s the decorating stage of building your &lt;del&gt;house&lt;/del&gt; website. Its the paint, furniture, and flooring; and is really what most users see when they see your site at first. It gives HTML elements their color, size, and shape. &lt;span style=&quot;border: 1px solid #aaa; border-radius: .25em;&quot;&gt;Borders&lt;/span&gt;, &lt;span style=&quot;text-shadow: 1px 1px 1px #aaa;&quot;&gt;shadows&lt;/span&gt;, &lt;span style=&quot;color: orange;&quot;&gt;colors&lt;/span&gt;, &lt;span style=&quot;font-weight: bold;&quot;&gt;bold fonts&lt;/span&gt;, &lt;span style=&quot;opacity: .65;&quot;&gt;opacities&lt;/span&gt;, etc. are all determined by CSS.&lt;/p&gt;

&lt;div id=&quot;attachment_540&quot; style=&quot;width: 660px&quot; class=&quot;wp-caption alignnone&quot;&gt;
  &lt;a href=&quot;http://www.anthonytrama.com/wp-content/uploads/2012/03/Screen-Shot-2013-11-21-at-8.45.25-PM.png&quot;&gt;&lt;img class=&quot;size-full wp-image-540&quot; alt=&quot;A preview of what this page would look like without any CSS. Notice everything still functions and you can still get content you need, even if it looks bland.&quot; src=&quot;http://www.anthonytrama.com/wp-content/uploads/2012/03/Screen-Shot-2013-11-21-at-8.45.25-PM.png&quot; width=&quot;650&quot; height=&quot;597&quot; srcset=&quot;http://www.anthonytrama.com/wp-content/uploads/2012/03/Screen-Shot-2013-11-21-at-8.45.25-PM-300x275.png 300w, http://www.anthonytrama.com/wp-content/uploads/2012/03/Screen-Shot-2013-11-21-at-8.45.25-PM.png 650w&quot; sizes=&quot;(max-width: 650px) 100vw, 650px&quot; /&gt;&lt;/a&gt;
  
  &lt;p class=&quot;wp-caption-text&quot;&gt;
    A preview of what this page would look like without any CSS. Notice everything still functions and you can still get content you need, even if it looks bland.
  &lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;CSS often does little to actually determine structure of the site, but it does determine how it is presented in the browser.&lt;/p&gt;

&lt;h2 id=&quot;javascript-its-electric&quot;&gt;JavaScript: It’s Electric&lt;/h2&gt;

&lt;p&gt;A house is completely livable without electricity; people did it for most of our existence. However, electricity makes it possible to flip a switch and light a room instead of carrying a candle. It turns on the TV, brews our coffee, and powers our dishwashers. Javascript does just that to websites. It tells the user that their password is too weak as they’re typing it in, creates and animates graphs, makes drag and drop possible on all modern browsers, and makes photos bigger when you click the thumbnail.&lt;/p&gt;

&lt;p&gt;JavasScript is a powerful language that can access and change the CSS of a page, edit the HTML and content and, if not used properly, really hinder the user’s experience on a page. If you’ve ever landed on a page that won’t let you escape out of multiple popups (called alerts) or had your experienced ruined by a choppy, slow page, JavaScript was likely to blame. Actually, a bad developer was most likely the one to blame; but they probably used JavaScript. In the same way, you watch your electric bill, watch the amount of JavaScript on your page because it &lt;a title=&quot;How One Second Could Cost Amazon $1.6 Billion In Sales&quot; href=&quot;http://www.fastcompany.com/1825005/how-one-second-could-cost-amazon-16-billion-sales&quot; target=&quot;_blank&quot;&gt;may cost you&lt;/a&gt; as well.&lt;/p&gt;

&lt;h2 id=&quot;php-letting-data-flow&quot;&gt;PHP: Letting Data Flow&lt;/h2&gt;

&lt;p&gt;Let me start by saying that you can replace PHP with other server-side languages (e.g., Ruby, Python, C#) for this example. These languages are the most powerful and complex languages and the user never sees any of it. It’s all done behind the scenes, generally, before and after the user lands on pages. Server-side languages communicate with databases and control the most of the data we interact with on the web today. The reason why you and I can both log into the same bank’s website and see different data is because the server-side language knows who you are after login and only displays your information on your screen.&lt;/p&gt;

&lt;p&gt;This example may not be as strong as the 3 above, but it’s similar to the sewer system. It’s a give and take relationship with the grid. Clean water comes in, say in the form of shower water. We interact with it by showering, and the resulting dirty, waste water goes back to the sewer system.&lt;/p&gt;

&lt;h2 id=&quot;seo-sweat-equity-online&quot;&gt;SEO: Sweat Equity Online&lt;/h2&gt;

&lt;p&gt;I’m not going to pretend to be an expert with SEO (Search Engine Optimization). Or pretend that the heading above isn’t incredibly cheesy.&lt;/p&gt;

&lt;p&gt;I know enough to use good practices on the sites I work on, but there are knowledgeable people who know much more than I do about SEO. If you’re selling a house, there are things that your realtor will have you do to attract more potential buyers through your front door, such as putting in a new lawn, a fresh coat of paint, or new hardwood flooring. Similarly, you can practice good SEO and get visitors to your site from search engines. However, like a real house’s attractiveness – the best SEO comes from care and maintenance over time (good content and clean code) and not a few &lt;a title=&quot;The Dirty Little Secrets of Search&quot; href=&quot;http://www.nytimes.com/2011/02/13/business/13search.html&quot; target=&quot;_blank&quot;&gt;sneaky tricks&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Oh, and for the last time, there’s no way to contact Google and ask them to make you the first result.&lt;/p&gt;
</description>
        <pubDate>Tue, 06 Mar 2012 04:23:28 +0000</pubDate>
        <link>http://www.anthonytrama.com//2012/03/06/the-web-as-a-house/</link>
        <guid isPermaLink="true">http://www.anthonytrama.com//2012/03/06/the-web-as-a-house/</guid>
        
        
        <category>Development</category>
        
      </item>
    
  </channel>
</rss>
