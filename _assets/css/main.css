html, body {
  font-family: 'Merriweather', serif;
  font-size: 20px; }

h1, h2, h3 {
  font-family: 'Lato', sans-serif;
  text-transform: uppercase;
  font-weight: 900; }

h1 {
  font-size: 4rem; }

p {
  line-height: 1.5; }

a {
  color: #76a8b2;
  text-decoration: none;
  transition: 0.5s color ease-in-out; }

a:hover {
    text-decoration: underline;
    color: #4f828c; }

* {
  box-sizing: border-box; }

body {
  margin: 0;
  padding: 0 1.5%;
  color: #2E3532;
  display: -ms-flexbox;
  display: flex;
  -ms-flex-direction: column;
  flex-direction: column;
  min-height: 100vh; }

@media (min-width: 1101px) {
    body {
      padding: 0 5%; } }

@media (min-width: 1401px) {
    body {
      padding: 0 10%; } }

main {
  -ms-flex: 1;
      flex: 1; }

pre {
  padding: 1rem;
  background: #2E3532;
  color: #d8dadf; }

body > header {
  margin: .5rem 0 0;
  padding: .25rem 0;
  border-bottom: 0.15rem solid #2E3532;
  display: -ms-flexbox;
  display: flex;
  -ms-flex-align: baseline;
      align-items: baseline; }

@media (min-width: 1101px) {
    body > header {
      margin-bottom: 2rem; } }

body > header h1 {
    margin: 0;
    font-size: 1rem;
    -ms-flex: 1 5 5rem;
        flex: 1 5 5rem; }

@media (min-width: 450px) {
      body > header h1 {
        -ms-flex: 1 1 8rem;
            flex: 1 1 8rem; } }

body > header a {
    color: inherit;
    text-decoration: none;
    font-weight: 700; }

.mainNav {
  margin-left: auto;
  text-align: right;
  -ms-flex: 4 1 auto;
      flex: 4 1 auto; }

@media (min-width: 450px) {
    .mainNav a:not(:first-of-type) {
      padding-left: 1rem; } }

footer {
  width: 103%;
  margin-left: -1.5%;
  padding: 0 1.5%;
  margin-top: 2rem;
  border-top: 0.25rem solid #2E3532;
  display: -ms-flexbox;
  display: flex;
  -ms-flex-align: center;
      align-items: center;
  -ms-flex-direction: column;
  flex-direction: column; }

@media (min-width: 1101px) {
    footer {
      width: 111%;
      margin: 0 -5.5%; } }

@media (min-width: 1401px) {
    footer {
      width: 125%;
      margin-left: -12.5%; } }

@media (min-width: 1101px) {
    footer {
      padding: 0 5.5%; } }

@media (min-width: 1401px) {
    footer {
      padding: 0 12.5%; } }

@media (min-width: 450px) {
    footer {
      -ms-flex-direction: row;
      flex-direction: row;
      -ms-flex-align: initial;
              -ms-grid-row-align: initial;
          align-items: initial; } }

@media (min-width: 701px) {
    footer {
      border-width: .5rem; } }

footer h2 {
    margin-bottom: .75rem; }

@media (min-width: 701px) {
      footer h2 {
        font-size: 2.25rem; } }

@media (min-width: 450px) {
    footer .socialMedia {
      margin-left: auto;
      margin-bottom: .75rem;
      -ms-flex-item-align: end;
          align-self: flex-end; } }

footer .socialMedia li {
    width: 3.5rem;
    padding: 0 .75rem;
    color: inherit; }

@media (min-width: 450px) {
      footer .socialMedia li {
        width: 3rem;
        padding: 0 .5rem; } }

@media (min-width: 701px) {
      footer .socialMedia li {
        width: 4rem; } }

footer .socialMedia svg {
    fill: #2E3532; }

label {
  width: 100%; }

input,
textarea {
  width: 100%;
  margin-bottom: .75rem;
  padding: .25rem;
  font-size: 1rem;
  color: #2E3532; }

form button {
  float: right;
  background: #fff;
  cursor: pointer;
  transition: 0.25s all ease-in-out; }

form button:hover {
    background: #d9d9d9; }

button {
  padding: .5rem 1rem;
  border: 0;
  font-size: 1.5rem;
  font-weight: 700;
  text-transform: uppercase;
  font-family: 'Merriweather', serif;
  transform: skewX(-8deg); }

.about {
  padding-top: 1.5rem;
  display: -ms-flexbox;
  display: flex;
  -ms-flex-wrap: wrap;
      flex-wrap: wrap;
  -ms-flex-align: center;
      align-items: center; }

@media (min-width: 1101px) {
    .about {
      padding-bottom: 1.5rem; } }

.about h1 {
    margin: .5rem 0 0;
    -ms-flex: 1 1 60vw;
        flex: 1 1 60vw;
    color: #79B791;
    font-size: 14vw; }

@media (min-width: 450px) {
      .about h1 {
        font-size: 13vw; } }

@media (min-width: 1101px) {
      .about h1 {
        font-size: 10.2vw;
        -ms-flex-preferred-size: 100%;
            flex-basis: 100%; } }

@media (min-width: 1401px) {
      .about h1 {
        margin-bottom: 1rem;
        font-size: 9.5vw; } }

.about figure {
    margin: 0;
    display: -ms-flexbox;
    display: flex;
    -ms-flex: 1 1 25vw;
        flex: 1 1 25vw; }

@media (min-width: 1101px) {
      .about figure {
        -ms-flex: 1 1 25%;
            flex: 1 1 25%;
        -ms-flex-order: 2;
            order: 2; } }

.about figure img {
      width: 20vw;
      height: 20vw;
      border-radius: 100%; }

.about .content {
    -ms-flex: 8 4 75vw;
        flex: 8 4 75vw; }

@media (min-width: 1101px) {
      .about .content {
        -ms-flex: 8 1 50%;
            flex: 8 1 50%;
        -ms-flex-order: 3;
            order: 3; } }

.postCont .headingCont {
  text-align: center; }

.postCont .headingCont h1 {
    margin-bottom: .75rem;
    padding: .25em 1em 0;
    display: inline-block;
    font-size: 2rem;
    color: white;
    text-align: center;
    background: #79B791; }

@media (min-width: 701px) {
      .postCont .headingCont h1 {
        font-size: 3rem; } }

@media (min-width: 1101px) {
      .postCont .headingCont h1 {
        font-size: 4rem; } }

.postCont .headingCont h1:after {
      width: 100%;
      border-width: 0 .65em .25em;
      border-style: solid;
      border-color: #79B791 transparent;
      display: block;
      content: ""; }

.postCont .allPosts {
  margin: 0 2%;
  text-align: right; }

.contact {
  padding: 2%;
  color: #fff;
  background: #76a8b2; }

@media (min-width: 701px) {
    .contact {
      display: -ms-flexbox;
      display: flex;
      -ms-flex-align: center;
          align-items: center; } }

@media (min-width: 1101px) {
    .contact {
      padding: 0 5rem; } }

.contact h1 {
    margin: 0;
    font-family: 'Lato', sans-serif;
    text-transform: uppercase;
    font-size: 21vw;
    font-weight: bold; }

@media (min-width: 701px) {
      .contact h1 {
        -ms-flex: 1 1 40%;
            flex: 1 1 40%;
        font-size: 7.5rem;
        line-height: .9; } }

@media (min-width: 1101px) {
      .contact h1 {
        padding-right: 3rem;
        -ms-flex: 1 1 auto;
            flex: 1 1 auto;
        text-align: right;
        font-size: 9.5rem; } }

.contact .contactOpts {
    padding-top: .5rem; }

@media (min-width: 701px) {
      .contact .contactOpts {
        -ms-flex: 1 1 60%;
            flex: 1 1 60%; } }

@media (min-width: 1101px) {
      .contact .contactOpts {
        -ms-flex: 1 1 auto;
            flex: 1 1 auto; } }

.contact .buttonCont {
    display: -ms-flexbox;
    display: flex;
    -ms-flex-direction: column;
    flex-direction: column;
    -ms-flex-align: end;
        align-items: flex-end; }

.contact button {
    color: #76a8b2; }

.contact form .contactErr {
    width: 100%;
    max-height: 0;
    overflow: hidden;
    color: #76a8b2;
    background: #ffe699;
    transition: 0.75s all ease-in-out; }

.contact form.hasError .contactErr {
    max-height: 8rem;
    padding: .5rem; }

.contact form .contactSuc {
    max-width: 0;
    max-height: 0;
    margin: 0;
    -ms-flex: 4 1 auto;
        flex: 4 1 auto;
    overflow: hidden;
    color: #2E3532;
    background: #ffe699;
    transition: 0.75s all ease-in-out;
    opacity: 0;
    transform: skewX(-8deg); }

.contact form.formSent .buttonCont {
    -ms-flex-direction: row-reverse;
    flex-direction: row-reverse;
    -ms-flex-align: inherit;
            -ms-grid-row-align: inherit;
        align-items: inherit; }

.contact form.formSent button {
    overflow: hidden;
    -ms-flex: 1 1 auto;
        flex: 1 1 auto;
    background: #d8dadf; }

.contact form.formSent .contactSuc {
    width: auto;
    max-width: 100vw;
    max-height: 8rem;
    padding: .5rem;
    opacity: 1; }

.socialMedia {
  margin: 0 0 1rem;
  padding: 0;
  display: -ms-flexbox;
  display: flex; }

@media (min-width: 701px) {
    .socialMedia {
      margin-bottom: .5rem; } }

.socialMedia li {
    width: 2rem;
    padding-right: .5rem;
    list-style: none;
    color: #fff; }

.socialMedia svg {
    fill: #fff; }

.socialMedia .username {
    top: -222vw;
    left: -222vw;
    position: absolute; }

.contact-top,
.contact-bottom {
  width: 100%;
  overflow-x: hidden; }

.contact-top:before,
.contact-bottom:after {
  display: block;
  width: 100%;
  content: "";
  border-width: 7rem 480px 0;
  border-style: solid;
  border-color: #76a8b2 transparent; }

@media (min-width: 450px) {
    .contact-top:before,
    .contact-bottom:after {
      border-width: 7rem 100vw 0; } }

@media (min-width: 1101px) {
    .contact-top:before,
    .contact-bottom:after {
      border-width: 14rem 90vw 0; } }

.contact-top:before {
  transform: rotateX(180deg); }

@media (min-width: 1101px) {
  .posts {
    display: -ms-flexbox;
    display: flex;
    -ms-flex-wrap: wrap;
        flex-wrap: wrap; } }

.posts article {
  margin-bottom: 2rem;
  padding: 2rem;
  box-shadow: 0 0 3rem 0.15rem rgba(216, 218, 223, 0.75);
  background: #fff; }

@media (min-width: 1101px) {
    .posts article {
      -ms-flex: 1 1 46%;
          flex: 1 1 46%;
      margin: 1rem 2% 1rem; } }

@media (min-width: 1401px) {
    .posts article {
      padding: .75rem 1rem; } }

.posts article h1 {
  margin: 0;
  font-size: 1.5rem; }

@media (min-width: 701px) {
    .posts article h1 {
      font-size: 2rem; } }

article h1 a, article h2 a {
  color: inherit; }

article h1 a:hover, article h2 a:hover {
    color: inherit;
    text-decoration: none; }

article header {
  display: block; }

article header h1 {
    margin-bottom: .25rem; }

.post h1 {
  margin-top: .5rem;
  font-size: 2rem; }

@media (min-width: 1101px) {
    .post h1 {
      font-size: 3.75rem; } }

@media (min-width: 1401px) {
    .post h1 {
      font-size: 5rem; } }

.post-meta {
  margin-top: .25rem;
  font-weight: 300;
  font-size: .85rem; }

.wp-caption {
  width: auto !important;
  text-align: center; }

.wp-caption-text {
  font-size: .8rem;
  font-style: italic; }

/*# sourceMappingURL=data:application/json;base64, */
